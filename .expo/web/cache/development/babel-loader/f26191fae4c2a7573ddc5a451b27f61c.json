{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  basket: [],\n  user: null\n};\nexport var getBasketTotal = function getBasketTotal(basket) {\n  return basket == null ? void 0 : basket.reduce(function (amount, item) {\n    return item.price + amount;\n  }, 0);\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'ADD_TO_BASKET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basket: [].concat(_toConsumableArray(state.basket), [action.item])\n      });\n\n    case 'REMOVE_FROM_BASKET':\n      var newBasket = _toConsumableArray(state.basket);\n\n      var index = state.basket.findIndex(function (basketItem) {\n        return basketItem.id === action.id;\n      });\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(\"Can't remove product of (id: \" + action.id + \") as it does not exist\");\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basket: newBasket\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/aa/Desktop/STC/STC/src/reducer.js"],"names":["initialState","basket","user","getBasketTotal","reduce","amount","item","price","reducer","state","action","type","newBasket","index","findIndex","basketItem","id","splice","console","warn"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE,EADgB;AAExBC,EAAAA,IAAI,EAAE;AAFkB,CAArB;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACF,MAAD,EAAY;AACtC,SAAOA,MAAP,oBAAOA,MAAM,CAAEG,MAAR,CAAe,UAACC,MAAD,EAAQC,IAAR;AAAA,WAAiBA,IAAI,CAACC,KAAL,GAAaF,MAA9B;AAAA,GAAf,EAAqD,CAArD,CAAP;AACH,CAFM;;AAIP,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAkB;AAE9B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AAEI,6CACQF,KADR;AAEKR,QAAAA,MAAM,+BAAMQ,KAAK,CAACR,MAAZ,IAAoBS,MAAM,CAACJ,IAA3B;AAFX;;AAIJ,SAAK,oBAAL;AAEI,UAAIM,SAAS,sBAAOH,KAAK,CAACR,MAAb,CAAb;;AAEA,UAAMY,KAAK,GAAGJ,KAAK,CAACR,MAAN,CAAaa,SAAb,CAAuB,UAACC,UAAD;AAAA,eAAgBA,UAAU,CAACC,EAAX,KAAkBN,MAAM,CAACM,EAAzC;AAAA,OAAvB,CAAd;;AAEA,UAAGH,KAAK,IAAI,CAAZ,EAAc;AAEVD,QAAAA,SAAS,CAACK,MAAV,CAAiBJ,KAAjB,EAAwB,CAAxB;AACH,OAHD,MAGK;AACDK,QAAAA,OAAO,CAACC,IAAR,mCAA6CT,MAAM,CAACM,EAApD;AACH;;AACD,6CAAWP,KAAX;AAAkBR,QAAAA,MAAM,EAAEW;AAA1B;;AACJ;AACI,aAAOH,KAAP;AArBR;AAuBH,CAzBD;;AA2BA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    basket: [],\n    user: null,\n};\n\nexport const getBasketTotal = (basket) => {\n    return basket?.reduce((amount,item) => item.price + amount, 0);\n}\n\nconst reducer = (state, action) =>{\n\n    switch(action.type){\n        case 'ADD_TO_BASKET':\n            // RETURN ALL THE CONTENT OF THE BASKET PLUS THE CURRENT ADDED ITEM\n            return {\n                 ...state, \n                 basket: [...state.basket, action.item],\n            };\n        case 'REMOVE_FROM_BASKET':\n            // Clone the basket\n            let newBasket = [...state.basket];\n            // Check if the product exist\n            const index = state.basket.findIndex((basketItem) => basketItem.id === action.id);\n\n            if(index >= 0){\n                // item exist in basket, remove it\n                newBasket.splice(index, 1);\n            }else{\n                console.warn(`Can't remove product of (id: ${action.id}) as it does not exist`);\n            }\n            return {...state, basket: newBasket};\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}